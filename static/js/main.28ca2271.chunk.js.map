{"version":3,"sources":["components/WarningMsg.js","components/StockTrendChart.js","components/StockRow.js","components/StockList.js","components/LiveGraph.js","components/OfflineGraph.js","components/StockAnalysis.js","common/api.js","App.js","serviceWorker.js","index.js"],"names":["WarningMsg","react_default","a","createElement","Row","className","Col","md","Alert","variant","Heading","src","alt","StockTrendChart","data","this","props","history","map","item","uv","es6","width","height","margin","top","right","left","bottom","type","dataKey","stroke","fill","color","Component","StockRow","getStockValueColor","trend","stock","name","style","value","toFixed","components_StockTrendChart","lib_default","date","lastModified","StockList","stocks","clearAllData","Navbar","expand","bg","Container","Brand","Button","size","float","onClick","Table","hover","Object","keys","stock_name","index","components_StockRow","key","LiveGraph","selectedKeys","historyData","timestamp","obj","Date","toLocaleTimeString","forEach","indexOf","parseInt","_this$props","generateGraphData","strokeDasharray","ReactFC","fcRoot","FusionCharts","TimeSeries","schema","format","OfflineGraph","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","timeseriesDs","renderAt","dataSource","chart","caption","text","subcaption","series","yaxis","plot","title","prefix","dateStr","arrItem","push","console","log","assign","DataStore","createDataTable","setState","ReactFC_default","isLiveGraphs","toggleLiveData","href","components_LiveGraph","components_OfflineGraph","API","App","getTrend","curr","prev","error","event","_this2","_this$state","newstocks","JSON","parse","timeStamp","now","stockName","toUpperCase","stockVal","isSelected","_this3","socket","WebSocket","onmessage","onNewMsgReceived","bind","onclose","err","_this$state2","rel","integrity","crossorigin","components_WarningMsg","StockAnalysis","components_StockList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.28ca2271.chunk.js","sourcesContent":["import React from 'react';\nimport { Alert, Row, Col } from 'react-bootstrap';\n\nconst WarningMsg = () => {\n  return (\n    <Row className=\"padding-lg\">\n      <Col md=\"12\">\n        <Alert variant=\"warning\">\n          <Alert.Heading>Oh snap! You got an error!</Alert.Heading>\n          <p>\n            Sorry to Inform you some of our script coming through un-secure server.<br/>\n            To go ahead please allow this site to load that script.<br/><br/>\n            <img src=\"https://support.palcs.org/hc/article_attachments/360002315187/load_unsafe_scripts.PNG\"\n                alt=\"Load Unsafe Scipt\"/>\n          </p>\n        </Alert>\n      </Col>\n    </Row>\n  );\n};\n\nexport default WarningMsg;\n","import React, { Component } from 'react';\nimport { AreaChart, Area } from 'recharts';\n\nclass StockTrendChart extends Component {\n  render() {\n    const data = this.props.history.map(item => ({ uv: item[0] || 0 }));\n    return (\n      <AreaChart\n        width={130}\n        height={40}\n        data={data}\n        margin={{\n          top: 3, right: 0, left: 0, bottom: 3,\n        }}>\n        <Area type=\"monotone\" dataKey=\"uv\" stroke=\"#8884d8\" fill={this.props.color} />\n      </AreaChart>\n    );\n  }\n}\n\nexport default StockTrendChart;\n","import React, { Component } from 'react';\nimport TimeAgo from 'react-timeago';\nimport StockTrendChart from './StockTrendChart';\nclass StockRow extends Component {\n\n  getStockValueColor = (trend) => {\n    if(trend === 1){\n      return 'red';\n    } else if(trend === 0){\n      return 'green';\n    } else {\n      return '#212529';\n    }\n  }\n\n  render() {\n    let { stock } = this.props;\n    const color = this.getStockValueColor(stock.trend);\n    return (\n        <tr>\n          <td>{stock.name}</td>\n          <td style={{ color: color }}>{stock.value.toFixed(2)}</td>\n          <td><StockTrendChart history={stock.history} color={color}/></td>\n          <td>\n            <TimeAgo date={ stock.lastModified } />\n          </td>\n        </tr>\n    );\n  }\n}\n\nexport default StockRow;\n","import React from 'react';\nimport { Navbar, Table, Container, Button, Col } from 'react-bootstrap';\nimport StockRow from './StockRow';\n\nconst StockList = (props) => {\n  const { stocks, clearAllData } = props;\n\n  return (\n    <Col md=\"5\">\n      <Navbar expand=\"lg\" variant=\"dark\" bg=\"dark\">\n        <Container>\n          <Navbar.Brand className=\"full-width\">\n            Stocks Listing &nbsp;\n            <Button variant=\"light\"\n              size=\"sm\"\n              style={{float: \"right\"}}\n              onClick={clearAllData}>\n              Clear Data\n            </Button>\n          </Navbar.Brand>\n        </Container>\n      </Navbar>\n      <Table hover={true}>\n        <thead>\n          <tr>\n            <th>Stock</th>\n            <th>Current Price</th>\n            <th>History</th>\n            <th>Last Updated</th>\n          </tr>\n        </thead>\n        <tbody>\n        {\n          Object.keys(stocks).map((stock_name, index) => {\n              const stock = stocks[stock_name];\n              return (\n                <StockRow stock={stock} key={stock.name}/>\n              );\n          })\n        }\n        </tbody>\n      </Table>\n    </Col>\n  );\n};\n\nexport default StockList;\n","import React, { Component } from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend} from 'recharts';\n\nclass LiveGraph extends Component {\n\n  generateGraphData(selectedKeys, historyData) {\n    const data = Object.keys(historyData).map((timestamp, index) => {\n      const dateObj = new Date(timestamp * 1000);\n      let obj = {\n        name: dateObj.toLocaleTimeString()\n      };\n\n      historyData[timestamp].forEach(item => {\n        if (selectedKeys.indexOf(item[0])) {\n          obj[item[0]] = parseInt(item[1], 10);\n        }\n      });\n      return obj;\n    });\n    return data;\n  }\n\n  render() {\n    const { stocks, historyData } = this.props;\n    const selectedKeys = Object.keys(stocks).map(item => item);\n    const data = this.generateGraphData(selectedKeys, historyData);\n\n    return (\n      <div className=\"margin-top\">\n        <LineChart\n          width={750}\n          height={450}\n          data={data}\n          margin={{\n            top: 5, right: 30, left: 20, bottom: 5,\n          }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"name\" />\n          <YAxis />\n          <Tooltip />\n          <Legend />\n          {\n            selectedKeys.map((key, index) => (\n              <Line type=\"monotone\" dataKey={key} stroke=\"#8884d8\" />\n            ))\n          }\n        </LineChart>\n      </div>\n    );\n  }\n}\n\nexport default LiveGraph;\n","import React, { Component } from 'react';\nimport FusionCharts from 'fusioncharts';\nimport ReactFC from 'react-fusioncharts';\nimport TimeSeries from \"fusioncharts/fusioncharts.timeseries\";\nimport data from './../assets/data.json';\n\nReactFC.fcRoot(FusionCharts, TimeSeries);\n\nconst schema = [{\n  name: \"Time\",\n  type: \"date\",\n  format: \"%d-%b-%y\"\n}, {\n  name: \"Type\",\n  type: \"string\"\n}, {\n  name: \"Stocks Value\",\n  type: \"number\"\n}];\n\nclass OfflineGraph extends Component {\n  constructor() {\n    super();\n    this.state = {\n      timeseriesDs: {\n        type: \"timeseries\",\n        renderAt: \"chart-container\",\n        width: \"100%\",\n        height: \"500\",\n        dataSource: {\n          chart: {},\n          caption: {\n            text: \"Stocks Analysis\"\n          },\n          subcaption: {\n            text: \"MSFT & EVA\"\n          },\n          series: \"Type\",\n          yaxis: [\n            {\n              plot: \"Stocks Value\",\n              title: \"Stock Value\",\n              format: {\n                prefix: \"$\"\n              }\n            }\n          ]\n        }\n      }\n    };\n  }\n\n  generateGraphData(selectedKeys, historyData) {\n    const data = [];\n    Object.keys(historyData).forEach((timestamp, index) => {\n      const dateObj = new Date(timestamp * 1000);\n      let dateStr = dateObj.toLocaleTimeString();\n      historyData[timestamp].forEach(item => {\n        if (selectedKeys.indexOf(item[0])) {\n          let arrItem = [dateStr];\n          arrItem.push(item[0]);\n          arrItem.push(parseInt(item[1], 10));\n          data.push(arrItem);\n        }\n      });\n    });\n    console.log(data);\n    return data;\n  }\n\n\n  componentDidMount() {\n    const timeseriesDs = Object.assign({}, this.state.timeseriesDs);\n    timeseriesDs.dataSource.data = new FusionCharts.DataStore().createDataTable(data, schema);\n    this.setState({ timeseriesDs });\n  }\n\n  render() {\n    const { stocks, historyData } = this.props;\n    const selectedKeys = Object.keys(stocks).map(item => item);\n    const data = this.generateGraphData(selectedKeys, historyData);\n    console.log(data);\n\n    return (\n      <div className=\"margin-top\">\n        <ReactFC {...this.state.timeseriesDs} />\n      </div>\n    );\n  }\n}\n\nexport default OfflineGraph;\n","import React, { Component } from 'react';\nimport { Container, Col, Navbar, Button } from 'react-bootstrap';\nimport LiveGraph from './LiveGraph';\nimport OfflineGraph from './OfflineGraph';\n\nclass StockRow extends Component {\n  state = {\n    isLiveGraphs: false\n  };\n\n  toggleLiveData = () => {\n    const { isLiveGraphs } = this.state;\n    this.setState({\n      isLiveGraphs: !isLiveGraphs\n    });\n  }\n\n  render() {\n    const { isLiveGraphs } = this.state;\n    const { stocks, historyData } = this.props;\n    return (\n      <Col md=\"7\">\n        <Navbar expand=\"lg\" variant=\"dark\" bg=\"dark\">\n          <Container>\n            <Navbar.Brand href=\"#\">\n              <Button variant=\"success\"\n                size=\"sm\"\n                onClick={this.toggleLiveData}>\n                {isLiveGraphs ? 'Live Data' : 'Offline Data'}\n              </Button>\n              &nbsp;&nbsp;&nbsp;Analysis\n            </Navbar.Brand>\n          </Container>\n        </Navbar>\n        {\n            isLiveGraphs\n            ? <LiveGraph stocks={stocks} historyData={historyData}/>\n            : <OfflineGraph stocks={stocks} historyData={historyData}/>\n        }\n      </Col>\n    );\n  }\n}\n\nexport default StockRow;\n","export const API = {\n    LIVE_STOCK_URL: 'ws://stocks.mnet.website/'\n};\n","import React, { Component } from 'react';\nimport { Row } from 'react-bootstrap';\nimport './App.css';\nimport WarningMsg from './components/WarningMsg';\nimport StockList from './components/StockList';\nimport StockAnalysis from './components/StockAnalysis';\nimport { API } from './common/api';\n/*\n  stocks : {\n    TEST: {\n      name: 'TEST',\n      value: '',\n      trend: 0/1/2,\n      isSelected: false,\n      lastModified: '',\n      history: [\n        { value: 12, time: '' }\n      ]\n    }\n  }\n*/\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      stocks: {},\n      historyData: {},\n      error: true\n    };\n  }\n\n  getTrend = (curr, prev) => {\n    if (curr > prev) {\n      return 0;\n    } else if (prev > curr) {\n      return 1;\n    }\n    return 2;\n  }\n\n  onNewMsgReceived(event) {\n    const { stocks, historyData } = this.state;\n    let newstocks = JSON.parse(event.data);\n    const timeStamp = Date.now();\n\n    historyData[timeStamp] = [];\n\n    newstocks.forEach(stock => {\n      const stockName = stock[0].toUpperCase();\n      const stockVal  = stock[1];\n\n      historyData[timeStamp].push([ stockName, stockVal ]);\n\n      if (stocks[stockName]) {\n        let history = stocks[stockName].history;\n\n        history.push([stocks[stockName].value, stocks[stockName].lastModified]);\n\n        stocks[stockName] = {\n          name: stockName,\n          value: stockVal,\n          trend: this.getTrend(stockVal, stocks[stockName].value),\n          lastModified: timeStamp,\n          isSelected: true,\n          history: history\n        };\n\n      } else {\n        stocks[stockName] = {\n          name: stockName,\n          value: stockVal,\n          trend: 2,\n          lastModified: timeStamp,\n          isSelected: true,\n          history: []\n        };\n      }\n    });\n\n    this.setState({\n      stocks: stocks,\n      historyData: historyData\n    });\n  }\n\n  componentDidMount() {\n    console.log(API.LIVE_STOCK_URL);\n    this.socket = new WebSocket(API.LIVE_STOCK_URL);\n    this.socket.onmessage = this.onNewMsgReceived.bind(this);\n    this.socket.onclose = (err) => {\n      console.log('OnClose: ', err);\n      this.setState({ error: true });\n    };\n\n  }\n\n  clearAllData = () => {\n    this.setState({\n      stocks: {},\n      historyData: {},\n    });\n  }\n\n  render() {\n    const { stocks, historyData, error } = this.state;\n    return [\n      <head>\n        <link\n          rel=\"stylesheet\"\n          href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\"\n          integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\"\n          crossorigin=\"anonymous\"/>\n      </head>,\n      error\n      ? <WarningMsg />\n      :\n      <Row>\n        <StockAnalysis stocks={stocks} historyData={historyData} />\n        <StockList stocks={stocks} clearAllData={this.clearAllData}/>\n      </Row>\n    ];\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}